class Room
{
    private:
        long long _id;
        std::vector<Person*> _occupants;
        static long long ID;
        Headmaster *_mediator;

    public:
        Room();
        virtual ~Room();

        //Methods
        bool canEnter(const Person* person) const;
        void enter(Person* person);
        void exit(Person* person);
        void printOccupants() const;

        //setters
        void setMediator(Headmaster* mediator);

        //Getters
        long long getId() const;
        std::vector<Person*> getOccupants() const;
};

class FormType
{
    CourseFinished,
    NeedMoreClassRoom,
    NeedCourseCreation,
    SubscriptionToCourse
};

class Form
{
    protected:
        FormType _formType;
        bool _isSigned;
        std::string _target;
        std::string _sender;

    public:
        explicit Form(FormType formType);
        explicit Form(FormType formType, const std::string &target);
        virtual ~Form();

        //Pure virtual method
        virtual void execute() = 0;

        //New methods
        void signForm();
        bool isSigned() const;
        FormType getFormType() const;
        std::string getTarget() const;
        std::string getSender() const;
};

class IMediator
{
    public:
        virtual ~IMediator() = default;

       // virtual void notify(const std::string &sender, const std::string &event) = 0;
        virtual void notify(Person &sender, const std::string &event, const std::string &target) = 0;
};

class Person
{
    private:
        std::string _name;
        Room* _currentRoom;
    
    public:
        explicit Person(const std::string &personName); 
        virtual ~Person();

        // Getters
        Room* room() const;
        const std::string &name() const;

        // Setters
        void setRoom(Room* room);
};

class Event
{
    RingBell
};

class Course
{
    private:
        std::string _courseName;
        Professor* _responsableProfessor;
        std::vector<Student*> _students;
        int _numberOfClassToGraduate;
        int _maximumNumberOfStudent;
        Headmaster *_mediator;

    public:
        explicit Course(const std::string &courseName);
        virtual ~Course();

        //setters
        void setNumberOfClassToGraduate(int numberOfClassToGraduate);
        void setMaximumNumberOfStudent(int maximumNumberOfStudent);

        //Getters
        std::string getCourseName() const;
        Professor* getResponsableProfessor() const;
        std::vector<Student*> getStudents() const;
        int getNumberOfClassToGraduate() const;
        int getMaximumNumberOfStudent() const;
        
        //Methods
        void assignProfessor(Professor* professor);
        void subscribeStudent(Student* student);
        void setMediator(Headmaster* mediator);
        void unsubscribeStudent(Student* student);
};

